name: build and test packages

on:
  push:
    branches:
      - main
    tags:
      - '*'
  # keeping wheel building for pull requests on for now.
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-frontend:
    uses: ./.github/workflows/frontend-build.yml

  test:
    name: test
    needs: build-frontend
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: download repo with built frontend
        uses: actions/download-artifact@v4
        with:
          name: repo-with-frontend
          path: .

      - name: install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      
      - name: install tangram (no plugins)
        run:
          uv sync --all-groups --package tangram
      
      - name: run tests
        env:
          TANGRAM_CONFIG_PATH: tangram.example.toml
        run: uv run pytest packages/tangram/tests/

  # TODO: what about sdist?

  build-hatch-wheels:
    name: build wheels (hatchling)
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: download repo with built frontend
        uses: actions/download-artifact@v4
        with:
          name: repo-with-frontend
          path: .

      - name: install uv
        uses: astral-sh/setup-uv@v6

      # hardcoding for now
      - name: build wheels
        run: |
          mkdir -p wheels
          uv build --package tangram_history
          uv build --package tangram_system
          uv build --package tangram_weather

      - name: upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheels/*.whl
          retention-days: 7

  # adapted from: `maturin generate-ci github --platform all` and
  # https://github.com/pydantic/pydantic-core/blob/main/.github/workflows/ci.yml
  build-maturin-wheels:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux) || '' }})
    needs: build-frontend
    strategy:
      fail-fast: false
      matrix:
        # aircraft db in `jet1090_planes` uses reqwest, causing build failures
        # see: https://github.com/PyO3/maturin-action/discussions/162#discussioncomment-7978369
        include:
          - os: linux
            manylinux: manylinux_2_28
            target: x86_64
          - os: linux
            manylinux: manylinux_2_28
            target: aarch64
            features: --features openssl-vendored,python
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64
          # skipping windows py314 and windows-11-arm: fatal error LNK1181: cannot open input file 'python312.lib'
          - os: windows
            target: x86_64
            interpreter: 3.10 3.11 3.12 3.13
          - os: linux
            manylinux: manylinux_2_28
            target: i686
          - os: linux
            manylinux: manylinux_2_28
            target: armv7
            interpreter: 3.10 3.11 3.12 3.13 3.14
            features: --features openssl-vendored,python
          - os: linux
            manylinux: manylinux_2_28
            target: ppc64le
            interpreter: 3.10 3.11 3.12 3.13 3.14
            features: --features openssl-vendored,python
          # skipping s390x for now: crypto/sha/keccak1600-s390x.S:399: Error: Unrecognized opcode: `cijne'
          # we need to bundle openssl>=3.5: https://github.com/openssl/openssl/issues/27323
          - os: linux
            manylinux: musllinux_1_1
            target: x86_64
            features: --features openssl-vendored,python
          - os: linux
            manylinux: musllinux_1_1
            target: aarch64
            features: --features openssl-vendored,python
          - os: linux
            manylinux: musllinux_1_1
            target: armv7
            features: --features openssl-vendored,python

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - name: download repo with built frontend
        uses: actions/download-artifact@v4
        with:
          name: repo-with-frontend
          path: .

      # manylinux_2_28 is almalinux
      - name: build tangram wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          working-directory: packages/tangram
          args: --release --out ../../dist --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12 3.13 3.14' }}

      - name: build tangram_jet1090 wheels
        if: always()
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          working-directory: packages/tangram_jet1090
          args: --release --out ../../dist ${{ matrix.features || '' }} --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12 3.13 3.14' }}
          before-script-linux: |
            if command -v apk &> /dev/null; then
              apk add --no-cache openssl-dev pkgconfig
            elif command -v yum &> /dev/null; then
              yum install -y openssl-devel pkgconfig
            elif command -v apt-get &> /dev/null; then
              apt-get update && apt-get install -y libssl-dev pkg-config
            fi

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - name: upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}_${{ matrix.target }}_${{ matrix.interpreter || 'all' }}_${{ matrix.manylinux }}
          path: dist